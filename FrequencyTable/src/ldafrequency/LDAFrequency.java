/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ldafrequency;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.zip.GZIPInputStream;

/**
 * Examine autogenerated files from Mallet execution, generate frequency matrix
 *
 * @author Clarky
 */
public class LDAFrequency {

    private static final int SKIP_LINES = 3;

    /**
     * @param args the command line arguments
     * @throws java.io.FileNotFoundException
     */
    public static void main(String[] args) throws FileNotFoundException, IOException {

        // Grab and wrap .gz file
        BufferedReader reader = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream("../LDA/mallet/topic-state.gz"))));

        // Skip over header lines (straight to relevant data)
        for (int i = 0; i < SKIP_LINES; i++) {
            reader.readLine();
        }

        String line;
        HashMap<String, Integer> tbl = new HashMap<String, Integer>();
        ArrayList<String> tags = new ArrayList<>();

        // For development, only use one user's (285) lines (instead of 177,000)
        for (int i = 0; i < 285; i++) {
            line = reader.readLine();

            // File is space-separated
            String parts[] = line.split(" ");

            // Grab required information to build structure
            String typeIndex = parts[3];
            String type = parts[4];
            String topic = parts[5];

            // If the key is not present in the structure, insert it
            if (!(tbl.containsKey(typeIndex))) {
                tbl.put(typeIndex, 0);
            }

            // Increment the count associated with the key
            tbl.put(typeIndex, tbl.get(typeIndex) + 1);

        }

        Iterator it = tbl.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pairs = (Map.Entry) it.next();
            System.out.println(pairs.getKey() + " occurs " + pairs.getValue() + " time(s)");
            it.remove(); // avoids a ConcurrentModificationException
        }

//        while ((line = reader.readLine()) != null) {
//        }
    }

}
