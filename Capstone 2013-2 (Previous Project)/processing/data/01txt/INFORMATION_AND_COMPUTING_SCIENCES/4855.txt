In Service-Oriented Architectures (SOAs), software systems  are decomposed into independent units, namely services, that interact  with one another through message exchanges. To promote reuse and  evolvability, these interactions are explicitly described right from the  early phases of the development lifecycle. Up to now, emphasis has been  placed on capturing structural aspects of service interactions. Gradually  though, the description of behavioral dependencies between service interactions  is gaining increasing attention as a means to push forward the  SOA vision. This paper deals with the description of these behavioral  dependencies during the analysis and design phases. The paper outlines  a set of requirements that a language for modeling service interactions at  this level should fulfill, and proposes a language whose design is driven  by these requirements.
