The purpose of this investigation was to examine how the programming and control of a rapid aiming sequence shifts with increased complexity. One objective was to determine if a preprogramming/peripheral constraint explanation is adequate to characterize control of an increasingly complex rapid aiming sequence, and if not, at what point on-line programming better accounts for the data. A second objective was to examine when on-line programming occurs. Three experiments were conducted in which complexity was manipulated by increasing the number of targets from 1 to 11. Initiation- and execution-timing patterns, probe reaction time, and movement kinematics were measured. Results supported the peripheral constraint/pre-programming explanation for sequences up to 7 targets if they were executed in a blocked fashion. For sequences executed in a random fashion (one length followed by a different length), preprogramming did not increase with complexity, and on-line programming occurred without time cost. Across all sequences there was evidence that the later targets created a peripheral constraint on movements to previous targets. We suggest that programming is influenced by two factors: the overall spatial trajectory, which is consistent with Sidawayâ€™s subtended angle hypothesis (1991), and average velocity, with the latter established based on the number of targets in the sequence. As the number of targets increases, average velocity decreases, which controls variability of error in the extent of each movement segment. Overall the data support a continuous model of processing, one in which programming and execution co-occur, and can do so without time cost.
