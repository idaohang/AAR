package patterncounter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Finds closed patterns in article texts, generates calculated weightings and
 * saves to the database.
 * 
 * @author	James Pyke 05090946 <j.pyke@connect.qut.edu.au>
 * @version	1.0
 */
public class PatternCounter {

    private final Integer MIN_ITEMSETS = 10;
    ArrayList<ClosedPattern> itemsets = new ArrayList<>();
    HashMap<Integer, BigDecimal> topicWeights = new HashMap<>();
    Integer topic = -1;
    private String dbServer, dbName, dbUser, dbPassword;
    private String armDirectory, txtDirectory, malletFile, category;
    ConnectMSSQL dbConnection;

    /**
     * Constructor
     * @param args
     * @throws Exception 
     */
    public PatternCounter(String[] args) throws Exception {
        dbServer = args[0];
        dbName = args[1];
        dbUser = args[2];
        dbPassword = args[3];
        armDirectory = args[4];
        txtDirectory = args[5];
        malletFile = args[6];
        category = args[7];
        topic = getTopicNumber(args[8]);
    }

    /**
     * Main functionality broken down into submethods:
     * readTopicWeights, readItemsets, cullItemsets, clearOldData, findMatches
     * @throws FileNotFoundException
     * @throws IOException 
     */
    public void countPatterns() throws FileNotFoundException, IOException {
        readTopicWeights();
        readItemsets();
        cullItemsets();
        dbConnection = new ConnectMSSQL(dbServer, dbName, dbUser, dbPassword);
        clearOldData();
        findMatches();
        dbConnection.closeConnection();
    }

    /**
     * Gets integer value from topic parameter at command line.
     * @param topicString
     * @return
     * @throws Exception 
     */
    private Integer getTopicNumber(String topicString) throws Exception {
        Matcher matcher = Pattern.compile("(Topic)?([0-9]+)",
                Pattern.CASE_INSENSITIVE).matcher(topicString);
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(2));
        }
        throw new Exception("Could not determine topic number");
    }

    /**
     * Reads topic distribution values from text files generated by MALLET.
     * @throws FileNotFoundException
     * @throws IOException 
     */
    private void readTopicWeights() throws FileNotFoundException, IOException {
        BufferedReader reader = new BufferedReader(new FileReader(malletFile));
        String line = "";

        do {
            line = reader.readLine();
            if (line == null) {
                break;
            }
            // ignore comment lines
            if (!line.substring(0, 1).equals("#")) {
                // This is Java's coincidentally-named "Pattern" object, not a
                // pattern-mining pattern unfortunately. For more info see
                // http://docs.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html
                Matcher matcher = Pattern.compile("([0-9]+)\\.txt").matcher(line);
                if (matcher.find()) {
                    Integer ePrintID = Integer.parseInt(matcher.group(1));
                    matcher = Pattern.compile("[	 ]([0-9]+)[	 ]([0-9.]+)").matcher(line);
                    while (matcher.find()) {
                        if (Integer.parseInt(matcher.group(1)) == topic) {
                            topicWeights.put(ePrintID, new BigDecimal(matcher.group(2)));
                        }
                    }
                }
            }
        } while (true);
        reader.close();
        System.out.println("Read in " + topicWeights.size() + " article weights");
    }

    /**
     * Reads closed itemsets and their support values from text files generated
     * by ARM.
     * @throws FileNotFoundException
     * @throws IOException 
     */
    private void readItemsets() throws FileNotFoundException, IOException {
        BufferedReader reader = new BufferedReader(new FileReader(armDirectory + "\\FrequentClosedItemsets-2.txt"));
        String line = "";

        // skip first few lines
        do {
            line = reader.readLine();
        } while (line != null && !line.matches("[   ]*Closed Itemsets[   ]*Generators[   ]*Support[   ]*"));

        // read actual closed itemsets
        do {
            line = reader.readLine();
            if (line == null) {
                break;
            }
            // This is Java's coincidentally-named "Pattern" object, not a
            // pattern-mining pattern unfortunately. For more info see
            // http://docs.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html
            Matcher matcher = Pattern.compile("\\[([^\\[\\]]+)\\].*? ([0-9.]+)").matcher(line);

            if (matcher.find()) {
                itemsets.add(new ClosedPattern(matcher.group(1), new BigDecimal(matcher.group(2))));
            }
        } while (true);
        reader.close();
        System.out.println("Read in " + itemsets.size() + " patterns & pattern weights");
    }

    /**
     * Ignores closed itemsets that are one single word, unless the number of
     * remaining itemsets would be less than MIN_ITEMSETS.
     */
    private void cullItemsets() {
        Integer compoundItemsets = 0;
        
        // count number of multiple-word patterns
        for (ClosedPattern itemset : itemsets) {
            if (itemset.itemset.matches(".*?,.*")) {
                compoundItemsets++;
            }
        }

        // delete single-word patterns if there are enough multiple-word
        if (compoundItemsets >= MIN_ITEMSETS) {
            for (int i = 0; i < itemsets.size(); i++) {
                if (!itemsets.get(i).itemset.matches(".*?,.*")) {
                    itemsets.remove(i--);
                }
            }
        }
    }

    /**
     * Delete old pattern data from the database left over from the previous
     * time the preprocessing suite was run.
     */
    private void clearOldData() {
        System.out.println("Clearing old data from database...");
        dbConnection.clearPatterns(category + "/" + topic + "/");
    }

    /**
     * Reads article texts, finds patterns, generates calculated weights and
     * saves to database.
     * @throws FileNotFoundException
     * @throws IOException 
     */
    private void findMatches() throws FileNotFoundException, IOException {
        System.out.println("Finding matches and inserting to database...");
        
        String line, txtContents;
        Integer ePrintID;
        Integer queriesRan = 0;

        // iterate through files in txtDirectory
        File[] txtFiles = new File(txtDirectory).listFiles();
        for (int i = 0; i < txtFiles.length; i++) {

            // filename to int
            Matcher matcher = Pattern.compile("([0-9]+)\\.txt").matcher(txtFiles[i].getName());
            if (matcher.find()) {
                ePrintID = Integer.parseInt(matcher.group(1));
            } else {
                continue;
            }

            // read article data
            txtContents = "";
            BufferedReader reader = new BufferedReader(new FileReader(txtFiles[i]));
            do {
                line = reader.readLine();
                if (line == null) {
                    break;
                }
                txtContents += line;
            } while (true);
            reader.close();

            // find article matches
            for (int j = 0; j < itemsets.size(); j++) {

                // break pattern into individual words (terms) (if applicable) and count them separately
                String[] terms = itemsets.get(j).itemset.split(",");
                Boolean matched = true;
                for (String term : terms) {
                    // Java's Pattern object again, naming is a coincidence
                    matcher = Pattern.compile(
                            "(^|[   .,;:])" + term,
                            Pattern.CASE_INSENSITIVE).matcher(txtContents);
                    if (!matcher.find()) {
                        matched = false;
                        break;
                    }
                }

                // insert to database
                if (matched) {
                    dbConnection.putPattern(ePrintID, category + "/" + topic + "/" + j, itemsets.get(j).support.multiply(topicWeights.get(ePrintID)));
                    queriesRan++;
                }
            }
        }
        System.out.println("Matches added: " + queriesRan);
    }
}
