/**
 * NonDerivableAlgorithm class.
 *
 * This class is the empty class to serve for the project students
 * to implement the Non-Derivable Itemset Mining algorithm by
 * Toon Calders & Bart Goethals.
 *
 * This class has been linked into the rest of the system and just
 * needs to have the implementation filled out.
 */
package Processing;

import java.util.ArrayList;

import Processing.BuildFrequentItemsets;
import Processing.Operations;

import Data.TransRecords;
import Data.CandidateList;
import Data.FItemsetList;

public class NonDerivableAlgorithm{

	private BuildFrequentItemsets bfi;
	
	private Operations ops;

	private CandidateList cl;

	private FItemsetList fl;

	private int minSupMode = 1;

	private byte itemsetSize;

	private ArrayList candidates, frequent, fCounters, fSupport, fTransList;
	
	private int[] cCounters;
	
	private float[] cSupports;
	
	private Object[] cTransList;

	private String trl;

	/**
	 * NonDerivableAlgorithm method.
	 * Constructor.
	 * Method used to initialise this class and setup the variables
	 * to hold the candidates for frequent itemset status and the
	 * actual frequent itemsets.
	 */
	public NonDerivableAlgorithm(BuildFrequentItemsets owner){
		bfi = owner;
		cl = new CandidateList();
		fl = new FItemsetList();
		ops = new Operations();
	}

	/**
	 * clearData method.
	 * Method used to destroy and clear the variables that hold the
	 * data and references that were used to perform the construction
	 * of the frequent itemsets. This is to free up memory.
	 */
	final public void clearData(){
		if (cl != null){
			cl.clearData();
			cl = null;
		}
		if (fl != null){
			fl.clearData();
			fl = null;
		}
		if (candidates != null){
			candidates.clear();
			candidates = null;
		}
		if (frequent != null){
			frequent.clear();
			frequent = null;
		}
		if (cCounters != null){
			//cCounters.clear();
			cCounters = null;
		}
		if (fCounters != null){
			fCounters.clear();
			fCounters = null;
		}
		if (cSupports != null){
			//cSupports.clear();
			cSupports = null;
		}
		if (fSupport != null){
			fSupport.clear();
			fSupport = null;
		}
		if (cTransList != null){
			//cTransList.clear();
			cTransList = null;
		}
		if (fTransList != null){
			fTransList.clear();
			fTransList = null;
		}
	}

	/**
	 * runAlgorithm method.
	 * Method that oversees the execution of the Non-Derivable
	 * Itemset Mining algorithm. Essentially this is where the
	 * actual work starts.
	 * @param - TransRecords tr - The reference to the data class
	 *                            that holds the transactions from
	 *                            the dataset.
	 * @param - float minCon - The float that holds the minimum confidence value.
	 * @param - float minSup - The float that holds the minimum support value.
	 */
	final public void runAlgorithm(TransRecords tr, float minCon, float minSup){
	}

	/**
	 * getFrequentItemsets method.
	 * Method used to get and pass back a reference to the data class
	 * that holds the frequent itemsets generated by this algorithm.
	 */
	final public FItemsetList getFrequentItemsets(){
		return fl;
	}

	/**
	 * getCandidateLists method.
	 * Method used to get and pass back a reference to the data class
	 * that holds the candidates that were considered to be frequent
	 * itemsets.
	 */
	final public CandidateList getCandidateLists(){
		return cl;
	}

	/**
	 * printCandidates method.
	 * Method use to print the list of candidate itemsets.
	 */
	final private void printCandidates(){
		cl.printData();
	}

	/**
	 * printFrequentItemsets method.
	 * Method use to print the list of candidate itemsets.
	 */
	final private void printFrequentItemsets(){
		fl.printData();
	}
}